/* autogenerated by Processing revision 1293 on 2024-09-26 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class main extends PApplet {

final int NB_PIECE = 3;

Menu currentMenu;
Button[] acceuilButtons;
Boolean[] acceuilButtonsActivated;
Button[] jeuButtons;
Boolean[] jeuButtonsActivated;

Board b;
Piece[] p;
Board[] pieces;

int backgroundTop;
int backgroundBot;

public void setup() {
  /* size commented out by preprocessor */;
  currentMenu = Menu.ACCEUIL;
  acceuilButtons = new Button[1];
  jeuButtons = new Button[1];
  acceuilButtonsActivated = new Boolean[] {false};
  jeuButtonsActivated = new Boolean[] {false};
  acceuilButtons[0] = new Button (width / 2, height / 2, 200, 50, "Commencer");
  acceuilButtons[0].setColor(116, 255, 247);
  acceuilButtons[0].setTextColor(0);
  acceuilButtons[0].setFontSize(20);
  jeuButtons[0] = new Button (width / 2, 40, 200, 50, "Placer une Pi√®ce");
  jeuButtons[0].setColor(255, 209, 54);
  jeuButtons[0].setTextColor(0);
  jeuButtons[0].setFontSize(20);
  
  backgroundTop = color(116, 255, 247);
  backgroundBot = color(255, 209, 54);
}


public void initGame () {
  b = new Board();

  pieces = new Board[NB_PIECE];

  for (int i = 0; i < NB_PIECE; i++) {
    pieces[i] = new Board(true);
  }

  p = new Piece[NB_PIECE];
  generePiece(p);
  for (int i = 0; i < NB_PIECE; i++) {
    pieces[i].placePieceP(p[i].type, false);
  }
}

public void draw() {
  setGradient(0, 0, width, height, backgroundTop, backgroundBot, 1);
  
  if (currentMenu == Menu.ACCEUIL) {
    textAlign(CENTER, CENTER);
    fill(0);
    textSize(50);
    text("Blockudoku\n(easy mode)", width/2, 200);
    for (int i = 0; i < acceuilButtons.length; i++) {
      acceuilButtons[i].display();
    }
  } else if (currentMenu == Menu.JEU) {
    b.display();

    for (int i = 0; i < NB_PIECE; i++) {
      pieces[i].display(i);
    }

    for (int i = 0; i < jeuButtons.length; i++) {
      jeuButtons[i].display();
    }
  }
}

public void mousePressed() {
  if (currentMenu == Menu.ACCEUIL) {
    for (int i = 0; i < acceuilButtons.length; i++) {
      if (acceuilButtons[i].isActivated()) {
        acceuilButtonsActivated[i] = true;
      }
    }
  } else if (currentMenu == Menu.JEU) {
    for (int i = 0; i < jeuButtons.length; i++) {
      if (jeuButtons[i].isActivated()) {
        jeuButtonsActivated[i] = true;
      }
    }
  }
}

public void mouseReleased() {
  if (acceuilButtonsActivated[0]) {
    currentMenu = Menu.JEU;
    acceuilButtonsActivated[0] = false;
    initGame();
    
    
  } else if (jeuButtonsActivated[0]) {

    int piecePlaced = b.placePiece(p, false);
    
    if (piecePlaced == -1) {
      currentMenu = Menu.ACCEUIL;
    } else {
      pieces[piecePlaced].resetBoard();
      p[piecePlaced] = null;
    }

    
    if (firstAvaiable(p) == -1) {
      generePiece(p);
      for (int i = 0; i < NB_PIECE; i++) {
        pieces[i].placePieceP(p[i].type, false);
      }
    }
    jeuButtonsActivated[0] = false;
  }
}

public void generePiece(Piece[] p) {
  for (int i = 0; i < NB_PIECE; i++) {
    p[i] = new Piece(i);
  }
}

public int firstAvaiable(Piece[] p) {
  for (int i = 0; i < p.length; i++) {
    if (p[i] != null) {
      return i;
    }
  }
  return -1;
}

public enumPiece getRandomPiece () {
  int rand = (int)random(100);
  if (rand < 4) {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.DIAGONALE3 : enumPiece.DIAGONALE3R;
  } else if (rand < 11) {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.LIGNE4H : enumPiece.LIGNE4V;
  } else if (rand < 18) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.LITTLE_L;
    } else if (rand == 1) {
      return enumPiece.LITTLE_L90;
    } else if (rand == 2) {
      return enumPiece.LITTLE_L180;
    } else {
      return enumPiece.LITTLE_L270;
    }
  } else if (rand < 20) {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.DIAGONALE2 : enumPiece.DIAGONALE2R;
  } else if (rand < 26) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.LITTLE_T;
    } else if (rand == 1) {
      return enumPiece.LITTLE_T90;
    } else if (rand == 2) {
      return enumPiece.LITTLE_T180;
    } else {
      return enumPiece.LITTLE_T270;
    }
  } else if (rand < 32) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.Z;
    } else if (rand == 1) {
      return enumPiece.ZR;
    } else if (rand == 2) {
      return enumPiece.Z90;
    } else {
      return enumPiece.ZR90;
    }
  } else if (rand < 38) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.BIG_T;
    } else if (rand == 1) {
      return enumPiece.BIG_T90;
    } else if (rand == 2) {
      return enumPiece.BIG_T180;
    } else {
      return enumPiece.BIG_T270;
    }
  } else if (rand < 56) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.BIG_L;
    } else if (rand == 1) {
      return enumPiece.BIG_L90;
    } else if (rand == 2) {
      return enumPiece.BIG_L180;
    } else {
      return enumPiece.BIG_L270;
    }
  } else if (rand < 62) {
    return enumPiece.CARRE;
  } else if (rand < 70) {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.LIGNE5V : enumPiece.LIGNE5H;
  } else if (rand < 71) {
    return enumPiece.SINGLE;
  } else if (rand < 79) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.C;
    } else if (rand == 1) {
      return enumPiece.C90;
    } else if (rand == 2) {
      return enumPiece.C180;
    } else {
      return enumPiece.C270;
    }
  } else if (rand < 85) {
    rand = (int)random(4);
    if (rand == 0) {
      return enumPiece.MIDDLE_L;
    } else if (rand == 1) {
      return enumPiece.MIDDLE_L90;
    } else if (rand == 2) {
      return enumPiece.MIDDLE_L180;
    } else {
      return enumPiece.MIDDLE_L270;
    }
  } else if (rand < 86) {
    return enumPiece.CROIX;
  } else if (rand < 90) {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.LIGNE2V : enumPiece.LIGNE2H;
  } else {
    rand = (int)random(2);
    return rand == 1 ? enumPiece.LIGNE3V : enumPiece.LIGNE3H;
  }
}



public void setGradient(int x, int y, float w, float h, int c1, int c2, int axis ) {

  noFill();

  if (axis == 1) {  // Top to bottom gradient
    for (int i = y; i <= y+h; i++) {
      float inter = map(i, y, y+h, 0, 1);
      int c = lerpColor(c1, c2, inter);
      stroke(c);
      line(x, i, x+w, i);
    }
  }  
  else if (axis == 2) {  // Left to right gradient
    for (int i = x; i <= x+w; i++) {
      float inter = map(i, x, x+w, 0, 1);
      int c = lerpColor(c1, c2, inter);
      stroke(c);
      line(i, y, i, y+h);
    }
  }
}
final int SIDE = 9;
final int PIECE_SIDE = 5;

class Board {
  public boolean [][] board;
  private boolean [][] lineCleanedBoard;
  private boolean [][] colonneCleanedBoard;
  private boolean [][] squareCleanedBoard;
  private boolean [][] tempBoard;

  private boolean isBoard;

  private int displayX;
  private int displayY;
  private int cellWidth;
  private int cellHeight;

  private int side;


  Board() {
    this.board = new boolean [SIDE][SIDE];
    this.resetBoard();
    this.lineCleanedBoard = new boolean [9][9];
    this.colonneCleanedBoard = new boolean [9][9];
    this.squareCleanedBoard = new boolean [9][9];
    
    this.tempBoard = new boolean[9][9];
    
    
    this.isBoard = true;

    this.displayX = 150;
    this.displayY = 100;
    this. cellWidth = (height - 296) / 9;
    this. cellHeight = (height - 296) / 9;
    this.side = SIDE;
  }

  Board(boolean piece) {
    this.board = new boolean [PIECE_SIDE][PIECE_SIDE];
    this.resetBoard();
    this.lineCleanedBoard = new boolean [9][9];
    this.colonneCleanedBoard = new boolean [9][9];
    this.squareCleanedBoard = new boolean [9][9];

    this.isBoard = false;

    this.displayX = 0;
    this.displayY = 0;
    this. cellWidth = 25;
    this. cellHeight = 25;
    this.side = PIECE_SIDE;
  }


  public void resetBoard() {
    for (int i = 0; i < this.side; i++) { //Colone
      for (int j = 0; j < this.side; j++) { //Ligne
        this.board[i][j] = false;
      }
    }
  }

  public boolean checkLigne (int i) { // True if the line is full
    boolean ligneOk = true;
    for (int j = 0; j < this.side; j++) {
      ligneOk = ligneOk && this.board[i][j];
    }
    return ligneOk;
  }

  public boolean checkLigneTemp (int i) { // True if the line is full
    boolean ligneOk = true;
    for (int j = 0; j < this.side; j++) {
      ligneOk = ligneOk && this.tempBoard[i][j];
    }
    return ligneOk;
  }

  public void cleanLigne (int i) {
    for (int j = 0; j < this.side; j++) {
      this.lineCleanedBoard[i][j] = false;
    }
  }

  public boolean checkColonne (int j) { // True if the line is full
    boolean colonneOk = true;
    for (int i = 0; i < this.side; i++) {
      colonneOk = colonneOk && this.board[i][j];
    }
    return colonneOk;
  }

  public boolean checkColonneTemp (int j) { // True if the line is full
    boolean colonneOk = true;
    for (int i = 0; i < this.side; i++) {
      colonneOk = colonneOk && this.tempBoard[i][j];
    }
    return colonneOk;
  }

  public void cleanColone (int j) {
    for (int i = 0; i < this.side; i++) {
      this.colonneCleanedBoard[i][j] = false;
    }
  }

  public void setCell (int i, int j) {
    this.board[i][j] = true;
  }

  public boolean checkSquare (int s) {
    boolean squareOk = true;
    for (int i = s - (s % 3); i < s - (s % 3) + 3; i++) {
      for (int j = (s % 3) * 3; j < ((s % 3) * 3) + 3; j++) {
        squareOk &= this.board[i][j];
      }
    }
    return squareOk;
  }

  public boolean checkSquareTemp (int s) {
    boolean squareOk = true;
    for (int i = s - (s % 3); i < s - (s % 3) + 3; i++) {
      for (int j = (s % 3) * 3; j < ((s % 3) * 3) + 3; j++) {
        squareOk &= this.tempBoard[i][j];
      }
    }
    return squareOk;
  }

  public void cleanSquare (int s) {
    for (int i = s - (s % 3); i < s - (s % 3) + 3; i++) {
      for (int j = (s % 3) * 3; j < ((s % 3) * 3) + 3; j++) {
        this.squareCleanedBoard[i][j] = false;
      }
    }
  }

  public int checkNbZoneDeleted (int i, int j, boolean temp, enumPiece p) {
    
    if (!temp) {
      for (int k = 0; k < this.side; k++) {
      for (int l = 0; l < this.side; l++) {
        this.tempBoard[k][l] = this.board[k][l];
      }
    }
    }
    
    int nb = 0;

    placePieceTemp(i, j, p);

    for (int k = 0; k < this.side; k++) {
      nb += checkLigneTemp(k) ? 1 : 0;
      nb += checkColonneTemp(k) ? 1 : 0;
      nb += checkSquareTemp(k) ? 1 : 0;
    }

    return nb * 3;
  }

  public void cleanBoard () {
    
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        this.lineCleanedBoard[i][j] = this.board[i][j];
        this.colonneCleanedBoard[i][j] = this.board[i][j];
        this.squareCleanedBoard[i][j] = this.board[i][j];
      } 
    }

    for (int i = 0; i < this.side; i++) {
      if (checkLigne(i)) {
        this.cleanLigne(i);
      }
    }
    for (int i = 0; i < this.side; i++) {
      if (checkColonne(i)) {
        this.cleanColone(i);
      }
    }
    for (int i = 0; i < this.side; i++) {
      if (checkSquare(i)) {
        this.cleanSquare(i);
      }
    }

    step();
  }

  public void step () {
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        this.board[i][j] = this.lineCleanedBoard[i][j] && this.colonneCleanedBoard[i][j] && this.squareCleanedBoard[i][j];
      }
    }
  }


  public void printBoard () {
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        print("| " + this.board[i][j] + " |");
      }
      println();
    }
  }

  public int getCell (int i, int j) {
    return (j - j%3) + (i - i%3) * 3;
  }

  public boolean placementSinglePossible (int i, int j, boolean temp) {
    if (temp) {
      return !this.tempBoard[i][j];
    } else {
      return !this.board[i][j];
    }
    
  }

  public void placeSingle (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
    } else {
      this.board[i][j] = true;
    }
  }
  
  public int bestScoreSingle (boolean temp) {
    int score = 0;
    int scoreMax = 0;
   for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementSinglePossible(i, j, temp)) {
          score = scoreSingle(i, j, temp);
          score += checkNbZoneDeleted(i, j, temp, enumPiece.SINGLE);
          if (score > scoreMax) {
            scoreMax = score;
          }
        }
      }
    }
    return scoreMax;
  }

  public boolean placeBestSingle (boolean temp) { //TODO
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementSinglePossible(i, j, temp)) {
          scoreAct = scoreSingle(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.SINGLE);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeSingle(iMax, jMax, temp);
    }

    return iMax != -1;
  }

  public int scoreSingle (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += this.tempBoard[i+1][j] ? 1 : 0;
        score += this.tempBoard[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += this.tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += this.tempBoard[i+1][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Coller en bas
        score += this.tempBoard[i][j+1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //pas coller en bas ni en haut
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += this.tempBoard[i][j+1] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += this.board[i+1][j] ? 1 : 0;
        score += this.board[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += this.board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += this.board[i+1][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Coller en bas
        score += this.board[i][j+1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //pas coller en bas ni en haut
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += this.board[i][j+1] ? 1 : 0;
    }
    }
    
    
    return score;
  }
  
  public int bestScoreDiago2 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago2Possible(i, j, temp)) {
          scoreAct = scoreDiago2(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE2);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestDiago2 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago2Possible(i, j, temp)) {
          scoreAct = scoreDiago2(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE2);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeDiago2(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public boolean placementDiago2Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j+1];
      }
      
    }
    return false;
  }

  public int scoreDiago2 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public void placeDiago2 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreDiago2R (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago2RPossible(i, j, temp)) {
          scoreAct = scoreDiago2R(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE2R);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestDiago2R (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago2RPossible(i, j, temp)) {
          scoreAct = scoreDiago2R(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE2R);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeDiago2R(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public boolean placementDiago2RPossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j];
      } else {
        return !this.board[i][j+1] && !this.board[i+1][j];
      }
    }
    return false;
  }

  public void placeDiago2R (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j] = true;
    } else {
      this.board[i][j+1] = true;
      this.board[i+1][j] = true;
    }
  }

  public int scoreDiago2R (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementDiago3RPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j+2] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j];
      } else {
        return !this.board[i][j+2] && !this.board[i+1][j+1] && !this.board[i+2][j];
      }
      
    }
    return false;
  }

  public void placeDiago3R (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j] = true;
    } else {
      this.board[i][j+2] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j] = true;
    }
  }
  
  public int bestScoreDiago3R (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago3RPossible(i, j, temp)) {
          scoreAct = scoreDiago3R(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE3R);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    
    return scoreMax;
  }

  public boolean placeBestDiago3R (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago3RPossible(i, j, temp)) {
          scoreAct = scoreDiago3R(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE3R);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeDiago3R(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreDiago3R (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i+1][j] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i+1][j] ? 2 : 0;
    score += board[i+2][j+1] ? 2 : 0;
    score += board[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementDiago3Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j+1] && !this.board[i+2][j+2];
      }
    }
    return false;
  }

  public void placeDiago3 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+2] = true;
    }
  }
  
  public int bestScoreDiago3 (boolean temp) {
    int scoreMax = -1;
    int scoreAct = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago3Possible(i, j, temp)) {
          scoreAct = scoreDiago3(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE3);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestDiago3 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementDiago3Possible(i, j, temp)) {
          scoreAct = scoreDiago3(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.DIAGONALE3);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeDiago3(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreDiago3 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i+1][j] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i+1][j] ? 2 : 0;
    score += board[i+2][j+1] ? 2 : 0;
    score += board[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+2][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne2VPossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j];
      } else {
        return !this.board[i][j] && !this.board[i+1][j];
      }
      
    }
    return false;
  }

  public void placeLigne2V (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
    }
  }
  
  public int bestScoreLigne2V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne2VPossible(i, j, temp)) {
          scoreAct = scoreLigne2V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE2V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    
    return scoreMax;
  }

  public boolean placeBestLigne2V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne2VPossible(i, j, temp)) {
          scoreAct = scoreLigne2V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE2V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne2V(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne2V (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+1] ? 1 : 0;
        score += this.tempBoard[i+1][j+1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+1] ? 1 : 0;
      score += this.tempBoard[i+1][j+1] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i][j+1] ? 1 : 0;
        score += this.board[i+1][j+1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+1] ? 1 : 0;
      score += this.board[i+1][j+1] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne2HPossible (int i, int j, boolean temp) {
    if (i < this.side && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1];
      } else {
        return !this.board[i][j] && !this.board[i][j+1];
      }
      
    }
    return false;
  }

  public void placeLigne2H (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
    }
  }
  
  public int bestScoreLigne2H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne2HPossible(i, j, temp)) {
          scoreAct = scoreLigne2H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE2H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLigne2H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne2HPossible(i, j, temp)) {
          scoreAct = scoreLigne2H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE2H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne2H(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne2H (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+1][j] ? 1 : 0;
        score += tempBoard[i+1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+1][j] ? 1 : 0;
      score += tempBoard[i+1][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+1][j] ? 1 : 0;
        score += board[i+1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+1][j] ? 1 : 0;
      score += board[i+1][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne3VPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j];
      }
      
    }
    return false;
  }

  public void placeLigne3V (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
    }
  }
  
  public int bestScoreLigne3V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne3VPossible(i, j, temp)) {
          scoreAct = scoreLigne3V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE3V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLigne3V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne3VPossible(i, j, temp)) {
          scoreAct = scoreLigne3V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE3V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne3V(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne3V (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+1] ? 1 : 0;
        score += this.tempBoard[i+1][j+1] ? 1 : 0;
        score += this.tempBoard[i+2][j+1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i][j+1] ? 1 : 0;
      score += this.tempBoard[i+1][j+1] ? 1 : 0;
      score += this.tempBoard[i+2][j+1] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.board[i][j+1] ? 1 : 0;
        score += this.board[i+1][j+1] ? 1 : 0;
        score += this.board[i+2][j+1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i][j+1] ? 1 : 0;
      score += this.board[i+1][j+1] ? 1 : 0;
      score += this.board[i+2][j+1] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne3HPossible (int i, int j, boolean temp) {
    if (i < this.side && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeLigne3H (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreLigne3H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne3HPossible(i, j, temp)) {
          scoreAct = scoreLigne3H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE3H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLigne3H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne3HPossible(i, j, temp)) {
          scoreAct = scoreLigne3H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE3H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne3H(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne3H (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += tempBoard[i+1][j] ? 1 : 0;
        score += tempBoard[i+1][j+1] ? 1 : 0;
        score += tempBoard[i+1][j+2] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+1][j] ? 1 : 0;
      score += tempBoard[i+1][j+1] ? 1 : 0;
      score += tempBoard[i+1][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += board[i+1][j] ? 1 : 0;
        score += board[i+1][j+1] ? 1 : 0;
        score += board[i+1][j+2] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+1][j] ? 1 : 0;
      score += board[i+1][j+1] ? 1 : 0;
      score += board[i+1][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne4VPossible (int i, int j, boolean temp) {
    if (i < this.side - 3 && j < this.side) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+3][j];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+3][j];
      }
      
    }
    return false;
  }

  public void placeLigne4V (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+3][j] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+3][j] = true;
    }
  }
  
  public int bestScoreLigne4V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne4VPossible(i, j, temp)) {
          scoreAct = scoreLigne4V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE4V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLigne4V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne4VPossible(i, j, temp)) {
          scoreAct = scoreLigne4V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE4V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne4V(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne4V (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 4) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+4][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+4][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i+3][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+1] ? 1 : 0;
        score += this.tempBoard[i+1][j+1] ? 1 : 0;
        score += this.tempBoard[i+2][j+1] ? 1 : 0;
        score += this.tempBoard[i+3][j+1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i+3][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score++;
      score += this.tempBoard[i][j+1] ? 1 : 0;
      score += this.tempBoard[i+1][j+1] ? 1 : 0;
      score += this.tempBoard[i+2][j+1] ? 1 : 0;
      score += this.tempBoard[i+3][j+1] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 4) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+4][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+4][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i+3][j-1] ? 1 : 0;
        score += this.board[i][j+1] ? 1 : 0;
        score += this.board[i+1][j+1] ? 1 : 0;
        score += this.board[i+2][j+1] ? 1 : 0;
        score += this.board[i+3][j+1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i+3][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score++;
      score += this.board[i][j+1] ? 1 : 0;
      score += this.board[i+1][j+1] ? 1 : 0;
      score += this.board[i+2][j+1] ? 1 : 0;
      score += this.board[i+3][j+1] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne4HPossible (int i, int j, boolean temp) {
    if (i < this.side && j < this.side - 3) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2] && !this.tempBoard[i][j+3];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i][j+2] && !this.board[i][j+3];
      }
      
    }
    return false;
  }

  public void placeLigne4H (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i][j+3] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
      this.board[i][j+3] = true;
    }
  }
  
  public int bestScoreLigne4H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne4HPossible(i, j, temp)) {
          scoreAct = scoreLigne4H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE4H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    return scoreMax;
  }

  public boolean placeBestLigne4H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne4HPossible(i, j, temp)) {
          scoreAct = scoreLigne4H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE4H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne4H(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne4H (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += tempBoard[i+1][j] ? 1 : 0;
        score += tempBoard[i+1][j+1] ? 1 : 0;
        score += tempBoard[i+1][j+2] ? 1 : 0;
        score += tempBoard[i+1][j+3] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+3] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+3] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score++;
      score += tempBoard[i+1][j] ? 1 : 0;
      score += tempBoard[i+1][j+1] ? 1 : 0;
      score += tempBoard[i+1][j+2] ? 1 : 0;
      score += tempBoard[i+1][j+3] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 4) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+4] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+4] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += board[i+1][j] ? 1 : 0;
        score += board[i+1][j+1] ? 1 : 0;
        score += board[i+1][j+2] ? 1 : 0;
        score += board[i+1][j+3] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i-1][j+3] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i-1][j+3] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score++;
      score += board[i+1][j] ? 1 : 0;
      score += board[i+1][j+1] ? 1 : 0;
      score += board[i+1][j+2] ? 1 : 0;
      score += board[i+1][j+3] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 4) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i][j+4] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+4] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne5VPossible (int i, int j, boolean temp) {
    if (i < this.side - 4 && j < this.side) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+3][j] && !this.tempBoard[i+4][j];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+3][j] && !this.board[i+4][j];
      }
      
    }
    return false;
  }

  public void placeLigne5V (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+3][j] = true;
      this.tempBoard[i+4][j] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+3][j] = true;
      this.board[i+4][j] = true;
    }
  }
  
  public int bestScoreLigne5V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne5VPossible(i, j, temp)) {
          scoreAct = scoreLigne5V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE5V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLigne5V (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne5VPossible(i, j, temp)) {
          scoreAct = scoreLigne5V(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE5V);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne5V(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLigne5V (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 5) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+5][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+5][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+1] ? 1 : 0;
        score += this.tempBoard[i+1][j+1] ? 1 : 0;
        score += this.tempBoard[i+2][j+1] ? 1 : 0;
        score += this.tempBoard[i+3][j+1] ? 1 : 0;
        score += this.tempBoard[i+4][j+1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i+3][j-1] ? 1 : 0;
        score += this.tempBoard[i+4][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i+3][j-1] ? 1 : 0;
        score += this.tempBoard[i+4][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score++;
      score++;
      score += this.tempBoard[i][j+1] ? 1 : 0;
      score += this.tempBoard[i+1][j+1] ? 1 : 0;
      score += this.tempBoard[i+2][j+1] ? 1 : 0;
      score += this.tempBoard[i+3][j+1] ? 1 : 0;
      score += this.tempBoard[i+4][j+1] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 5) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+5][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+5][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 1) { //Pas coller a droite ni a gauche
        score += this.board[i][j+1] ? 1 : 0;
        score += this.board[i+1][j+1] ? 1 : 0;
        score += this.board[i+2][j+1] ? 1 : 0;
        score += this.board[i+3][j+1] ? 1 : 0;
        score += this.board[i+4][j+1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i+3][j-1] ? 1 : 0;
        score += this.board[i+4][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i+3][j-1] ? 1 : 0;
        score += this.board[i+4][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score++;
      score++;
      score += this.board[i][j+1] ? 1 : 0;
      score += this.board[i+1][j+1] ? 1 : 0;
      score += this.board[i+2][j+1] ? 1 : 0;
      score += this.board[i+3][j+1] ? 1 : 0;
      score += this.board[i+4][j+1] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLigne5HPossible (int i, int j, boolean temp) {
    if (i < this.side && j < this.side - 4) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2] && !this.tempBoard[i][j+3] && !this.tempBoard[i][j+4];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i][j+2] && !this.board[i][j+3] && !this.board[i][j+4];
      }
    }
    return false;
  }

  public void placeLigne5H (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i][j+3] = true;
      this.tempBoard[i][j+4] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
      this.board[i][j+3] = true;
      this.board[i][j+4] = true;
    }
  }
  
  public int bestScoreLigne5H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne5HPossible(i, j, temp)) {
          scoreAct = scoreLigne5H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE5H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    
    return scoreMax;
  }

  public boolean placeBestLigne5H (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLigne5HPossible(i, j, temp)) {
          scoreAct = scoreLigne5H(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LIGNE5H);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLigne5H(iMax, jMax, false);
    }
    return iMax != -1;
  }

  public int scoreLigne5H (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += tempBoard[i+1][j] ? 1 : 0;
        score += tempBoard[i+1][j+1] ? 1 : 0;
        score += tempBoard[i+1][j+2] ? 1 : 0;
        score += tempBoard[i+1][j+3] ? 1 : 0;
        score += tempBoard[i+1][j+4] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+3] ? 1 : 0;
        score += tempBoard[i-1][j+4] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+3] ? 1 : 0;
        score += tempBoard[i-1][j+4] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score++;
      score++;
      score += tempBoard[i+1][j] ? 1 : 0;
      score += tempBoard[i+1][j+1] ? 1 : 0;
      score += tempBoard[i+1][j+2] ? 1 : 0;
      score += tempBoard[i+1][j+3] ? 1 : 0;
      score += tempBoard[i+1][j+4] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 5) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+5] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+5] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 1) { //pas coller en bas ni en haut
        score += board[i+1][j] ? 1 : 0;
        score += board[i+1][j+1] ? 1 : 0;
        score += board[i+1][j+2] ? 1 : 0;
        score += board[i+1][j+3] ? 1 : 0;
        score += board[i+1][j+4] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i-1][j+3] ? 1 : 0;
        score += board[i-1][j+4] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i-1][j+3] ? 1 : 0;
        score += board[i-1][j+4] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score++;
      score++;
      score += board[i+1][j] ? 1 : 0;
      score += board[i+1][j+1] ? 1 : 0;
      score += board[i+1][j+2] ? 1 : 0;
      score += board[i+1][j+3] ? 1 : 0;
      score += board[i+1][j+4] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 5) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i][j+5] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+5] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleLPossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleL (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i][j+1] = true;
    }
  }
  
  public int bestScoreLittleL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleLPossible(i, j, temp)) {
          scoreAct = scoreLittleL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleLPossible(i, j, temp)) {
          scoreAct = scoreLittleL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleL(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleL (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleL90Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j+1] && !this.board[i][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleL90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i][j+1] = true;
    }
  }
  
  public int bestScoreLittleL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL90Possible(i, j, temp)) {
          scoreAct = scoreLittleL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL90Possible(i, j, temp)) {
          scoreAct = scoreLittleL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleL90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleL90 (int i, int j, boolean temp) {
    int score = 0;

    if (temp) {
      score += tempBoard[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
     score += board[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
    } 
    }
    
    return score;
  }

  public boolean placementLittleL180Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i][j+1];
      } else {
        return !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleL180 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i+1][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreLittleL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL180Possible(i, j, temp)) {
          scoreAct = scoreLittleL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL180Possible(i, j, temp)) {
          scoreAct = scoreLittleL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleL180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleL180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleL270Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+1][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleL270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreLittleL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL270Possible(i, j, temp)) {
          scoreAct = scoreLittleL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleL270Possible(i, j, temp)) {
          scoreAct = scoreLittleL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleL270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleL270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementMiddleLPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+2][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeMiddleL (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreMiddleL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleLPossible(i, j, temp)) {
          scoreAct = scoreMiddleL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestMiddleL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleLPossible(i, j, temp)) {
          scoreAct = scoreMiddleL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeMiddleL(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreMiddleL (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 1 : 0;
    score += tempBoard[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 1 : 0;
    score += board[i+1][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i+2][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementMiddleL90Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i][j+1] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeMiddleL90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreMiddleL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL90Possible(i, j, temp)) {
          scoreAct = scoreMiddleL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestMiddleL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL90Possible(i, j, temp)) {
          scoreAct = scoreMiddleL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeMiddleL90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreMiddleL90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;
    score += board[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementMiddleL180Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeMiddleL180 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreMiddleL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL270Possible(i, j, temp)) {
          scoreAct = scoreMiddleL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestMiddleL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL270Possible(i, j, temp)) {
          scoreAct = scoreMiddleL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeMiddleL270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreMiddleL270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i+2][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i+2][j+2] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementMiddleL270Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeMiddleL270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreMiddleL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL180Possible(i, j, temp)) {
          scoreAct = scoreMiddleL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestMiddleL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementMiddleL180Possible(i, j, temp)) {
          scoreAct = scoreMiddleL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.MIDDLE_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeMiddleL180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreMiddleL180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j] ? 2 : 0;
    score += tempBoard[i+2][j] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+2][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
    }
    } else {
      score += board[i+1][j] ? 2 : 0;
    score += board[i+2][j] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+2][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
      score += this.board[i+2][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigLPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i][j+1] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeBigL (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
    }
  }
  
    public int bestScoreBigL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigLPossible(i, j, temp)) {
          scoreAct = scoreBigL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    
    return scoreMax;
  }


  public boolean placeBestBigL (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigLPossible(i, j, temp)) {
          scoreAct = scoreBigL(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigL(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigL (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 1 : 0;
    score += tempBoard[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;
    score += board[i+2][j+1] ? 1 : 0;
    score += board[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigL90Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i+2][j+2];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i][j+2] && !this.board[i+1][j+2] && !this.board[i+2][j+2];
      }
      
    }
    return false;
  }

  public void placeBigL90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i+2][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
      this.board[i+1][j+2] = true;
      this.board[i+2][j+2] = true;
    }
  }
  
  public int bestScoreBigL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL90Possible(i, j, temp)) {
          scoreAct = scoreBigL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigL90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL90Possible(i, j, temp)) {
          scoreAct = scoreBigL90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigL90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigL90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;
    score += tempBoard[i+1][j] ? 1 : 0;
    score += tempBoard[i+2][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;
    score += board[i+1][j] ? 1 : 0;
    score += board[i+2][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigL180Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i+2][j] && !this.tempBoard[i+2][j+1] && !this.tempBoard[i+2][j+2] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i+2][j] && !this.board[i+2][j+1] && !this.board[i+2][j+2] && !this.board[i+1][j+2] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeBigL180 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+2][j+1] = true;
      this.tempBoard[i+2][j+2] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i+2][j] = true;
      this.board[i+2][j+1] = true;
      this.board[i+2][j+2] = true;
      this.board[i+1][j+2] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreBigL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL180Possible(i, j, temp)) {
          scoreAct = scoreBigL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigL180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL180Possible(i, j, temp)) {
          scoreAct = scoreBigL180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigL180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigL180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;
    score += tempBoard[i+1][j] ? 1 : 0;
    score += tempBoard[i][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
      score += tempBoard[i+3][j+2] ? 1 : 0;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;
    score += board[i+1][j] ? 1 : 0;
    score += board[i][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+1] ? 1 : 0;
      score += board[i+3][j+2] ? 1 : 0;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigL270Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+2][j+1] && !this.tempBoard[i+2][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+2][j+1] && !this.board[i+2][j+2];
      }
      
    }
    return false;
  }

  public void placeBigL270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+2][j+1] = true;
      this.tempBoard[i+2][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+2][j+1] = true;
      this.board[i+2][j+2] = true;
    }
  }
  
  public int bestScoreBigL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL270Possible(i, j, temp)) {
          scoreAct = scoreBigL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigL270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigL270Possible(i, j, temp)) {
          scoreAct = scoreBigL270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_L270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigL270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigL270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 2 : 0;
    score += tempBoard[i][j+1] ? 1 : 0;
    score += tempBoard[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
      score += tempBoard[i+3][j+2] ? 1 : 0;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 2 : 0;
    score += board[i][j+1] ? 1 : 0;
    score += board[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+1] ? 1 : 0;
      score += board[i+3][j+2] ? 1 : 0;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+2][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleTPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+1][j+1];
      } else {
      return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+1][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleT (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreLittleT (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleTPossible(i, j, temp)) {
          scoreAct = scoreLittleT(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleT (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleTPossible(i, j, temp)) {
          scoreAct = scoreLittleT(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleT(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleT (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i+2][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleT90Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2] && !this.tempBoard[i+1][j+1];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i][j+2] && !this.board[i+1][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleT90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreLittleT90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT90Possible(i, j, temp)) {
          scoreAct = scoreLittleT90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleT90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT90Possible(i, j, temp)) {
          scoreAct = scoreLittleT90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleT90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleT90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j] ? 2 : 0;
    score += board[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleT180Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i+1][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1];
      } else{
        return !this.board[i+1][j] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeLittleT180 (int i, int j, boolean temp) {

    if (temp) {
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i+1][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreLittleT180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT180Possible(i, j, temp)) {
          scoreAct = scoreLittleT180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    

    return scoreMax;
  }

  public boolean placeBestLittleT180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT180Possible(i, j, temp)) {
          scoreAct = scoreLittleT180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleT180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleT180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i+2][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+2][j+2] ? 1 : 0;
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
      score += this.tempBoard[i][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i+2][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+2][j+2] ? 1 : 0;
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+1][j+2] ? 1 : 0;
      score += this.board[i+2][j+2] ? 1 : 0;
      score += this.board[i][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementLittleT270Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2];
      } else {
        return !this.board[i][j+1] && !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2];
      }
      
    }
    return false;
  }

  public void placeLittleT270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+2] = true;
    } else {
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j] = true;
      this.board[i+1][j+2] = true;
    }
  }
  
  public int bestScoreLittleT270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT270Possible(i, j, temp)) {
          scoreAct = scoreLittleT270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestLittleT270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementLittleT270Possible(i, j, temp)) {
          scoreAct = scoreLittleT270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.LITTLE_T270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeLittleT270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreLittleT270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
      score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
      score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigTPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+2][j+1] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeBigT (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreBigT (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigTPossible(i, j, temp)) {
          scoreAct = scoreBigT(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigT (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigTPossible(i, j, temp)) {
          scoreAct = scoreBigT(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigT(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigT (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j] ? 2 : 0;
    score += tempBoard[i+2][j] ? 1 : 0;
    score += tempBoard[i+1][j+2] ? 2 : 0;
    score += tempBoard[i+2][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j] ? 2 : 0;
    score += board[i+2][j] ? 1 : 0;
    score += board[i+1][j+2] ? 2 : 0;
    score += board[i+2][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigT90Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i][j+2] && !this.tempBoard[i+2][j+2];
      } else {
        return !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2] && !this.board[i][j+2] && !this.board[i+2][j+2];
      }
      
    }
    return false;
  }

  public void placeBigT90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i+2][j+2] = true;
    } else {
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
      this.board[i][j+2] = true;
      this.board[i+2][j+2] = true;
    }
  }
  
  public int bestScoreBigT90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT90Possible(i, j, temp)) {
          scoreAct = scoreBigT90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigT90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT90Possible(i, j, temp)) {
          scoreAct = scoreBigT90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigT90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigT90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i][j+1] ? 1 : 0;
    score += tempBoard[i+2][j] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i][j+1] ? 1 : 0;
    score += board[i+2][j] ? 2 : 0;
    score += board[i+2][j+1] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i+2][j+3] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigT180Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1] && !this.tempBoard[i+2][j+2] && !this.tempBoard[i+2][j];
      } else {
        return !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+2][j+1] && !this.board[i+2][j+2] && !this.board[i+2][j];
      }
      
    }
    return false;
  }

  public void placeBigT180 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
      this.tempBoard[i+2][j+2] = true;
      this.tempBoard[i+2][j] = true;
    } else {
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
      this.board[i+2][j+2] = true;
      this.board[i+2][j] = true;
    }
  }
  
  public int bestScoreBigT180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT180Possible(i, j, temp)) {
          scoreAct = scoreBigT180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigT180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT180Possible(i, j, temp)) {
          scoreAct = scoreBigT180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigT180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigT180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
    score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i+1][j] ? 1 : 0;
    score += tempBoard[i][j+2] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i+3][j+2] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
      score += tempBoard[i+3][j+1] ? 1 : 0;
      score += tempBoard[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+2][j+3] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+2][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i+1][j] ? 1 : 0;
    score += board[i][j+2] ? 2 : 0;
    score += board[i+1][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i+3][j+2] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
      score += board[i+3][j+1] ? 1 : 0;
      score += board[i+3][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+2][j+3] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+2][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementBigT270Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2];
      }
      
    }
    return false;
  }

  public void placeBigT270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
    }
  }
  
  public int bestScoreBigT270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT270Possible(i, j, temp)) {
          scoreAct = scoreBigT270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestBigT270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementBigT270Possible(i, j, temp)) {
          scoreAct = scoreBigT270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.BIG_T270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeBigT270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreBigT270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i][j+2] ? 1 : 0;
    score += tempBoard[i+2][j+1] ? 2 : 0;
    score += tempBoard[i+2][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i][j+2] ? 1 : 0;
    score += board[i+2][j+1] ? 2 : 0;
    score += board[i+2][j+2] ? 1 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i+3][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementCroixPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i][j+1] && !this.tempBoard[i+2][j+1];
      } else {
        return !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2] && !this.board[i][j+1] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeCroix (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
      this.board[i][j+1] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreCroix (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCroixPossible(i, j, temp)) {
          scoreAct = scoreCroix(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.CROIX);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestCroix (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCroixPossible(i, j, temp)) {
          scoreAct = scoreCroix(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.CROIX);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeCroix(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreCroix (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i][j+2] ? 2 : 0;
    score += tempBoard[i+2][j] ? 2 : 0;
    score += tempBoard[i+2][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i][j+2] ? 2 : 0;
    score += board[i+2][j] ? 2 : 0;
    score += board[i+2][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementCPossible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j] && !this.tempBoard[i+2][j+1];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j] && !this.board[i+2][j] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeC (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreC (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCPossible(i, j, temp)) {
          scoreAct = scoreC(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestC (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCPossible(i, j, temp)) {
          scoreAct = scoreC(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeC(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreC (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += board[i+1][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+2][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+3][j] ? 1 : 0;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+2][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+2][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementC90Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i][j+2] && !this.tempBoard[i+1][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i][j+1] && !this.board[i][j+2] && !this.board[i+1][j+2];
      }
      
    }
    return false;
  }

  public void placeC90 (int i, int j, boolean temp) {

    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i+1][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i][j+1] = true;
      this.board[i][j+2] = true;
      this.board[i+1][j+2] = true;
    }
  }
  
  public int bestScoreC90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC90Possible(i, j, temp)) {
          scoreAct = scoreC90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestC90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC90Possible(i, j, temp)) {
          scoreAct = scoreC90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeC90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreC90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i+1][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i+1][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementC180Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1] && !this.tempBoard[i+2][j];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+2][j+1] && !this.board[i+2][j];
      }
      
    }
    return false;
  }

  public void placeC180 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
      this.tempBoard[i+2][j] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
      this.board[i+2][j] = true;
    }
  }
  
  public int bestScoreC180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC180Possible(i, j, temp)) {
          scoreAct = scoreC180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestC180 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC180Possible(i, j, temp)) {
          scoreAct = scoreC180(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C180);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeC180(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreC180 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += board[i+1][j] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+2][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
    }
    } else {
      score += board[i+1][j] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j] ? 1 : 0;
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+3][j] ? 1 : 0;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+2][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
      score += this.board[i+2][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementC270Possible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2] && !this.tempBoard[i][j+2];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+1][j+2] && !this.board[i][j+2];
      }
      
    }
    return false;
  }

  public void placeC270 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
      this.tempBoard[i][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
      this.board[i][j+2] = true;
    }
  }
  
  public int bestScoreC270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC270Possible(i, j, temp)) {
          scoreAct = scoreC270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestC270 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementC270Possible(i, j, temp)) {
          scoreAct = scoreC270(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.C270);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeC270(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreC270 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += board[i][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i+2][j+2] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 3 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i+2][j+2] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+3] ? 1 : 0;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementCarrePossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j] && !this.board[i+1][j+1];
      }
      
    }
    return false;
  }

  public void placeCarre (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
    }
  }
  
  public int bestScoreCarre (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCarrePossible(i, j, temp)) {
          scoreAct = scoreCarre(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.CARRE);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestCarre (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementCarrePossible(i, j, temp)) {
          scoreAct = scoreCarre(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.CARRE);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeCarre(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreCarre (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementZPossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j+2];
      } else {
        return !this.board[i][j] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+1][j+2];
      }
      
    }
    return false;
  }

  public void placeZ (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j+2] = true;
    } else {
      this.board[i][j] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j+2] = true;
    }
  }
  
  public int bestScoreZ (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZPossible(i, j, temp)) {
          scoreAct = scoreZ(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.Z);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestZ (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZPossible(i, j, temp)) {
          scoreAct = scoreZ(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.Z);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeZ(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreZ (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+2] ? 2 : 0;
    score += tempBoard[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i+2][j+2] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j+1] ? 1 : 0;
      score += tempBoard[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+3] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i+1][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j+2] ? 2 : 0;
    score += board[i+1][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i+2][j+2] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j+1] ? 1 : 0;
      score += board[i+2][j+2] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+3] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i+1][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementZ90Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j] && !this.tempBoard[i+2][j];
      } else {
        return !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+1][j] && !this.board[i+2][j];
      }
      
    }
    return false;
  }

  public void placeZ90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+2][j] = true;
    } else {
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j] = true;
      this.board[i+2][j] = true;
    }
  }
  
  public int bestScoreZ90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZ90Possible(i, j, temp)) {
          scoreAct = scoreZ90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.Z90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }
    
    return scoreMax;
  }

  public boolean placeBestZ90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZ90Possible(i, j, temp)) {
          scoreAct = scoreZ90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.Z90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeZ90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreZ90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i+2][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
        score += this.tempBoard[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i][j+2] ? 1 : 0;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i+2][j+1] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j+1] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i][j+2] ? 1 : 0;
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
        score += this.board[i+2][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i][j+2] ? 1 : 0;
      score += this.board[i+1][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementZRPossible (int i, int j, boolean temp) {
    if (i < this.side - 1 && j < this.side - 2) {
      if (temp) {
        return !this.tempBoard[i][j+2] && !this.tempBoard[i][j+1] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+1][j];
      } else {
        return !this.board[i][j+2] && !this.board[i][j+1] && !this.board[i+1][j+1] && !this.board[i+1][j];
      }
      
    }
    return false;
  }

  public void placeZR (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j+2] = true;
      this.tempBoard[i][j+1] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+1][j] = true;
    } else {
      this.board[i][j+2] = true;
      this.board[i][j+1] = true;
      this.board[i+1][j+1] = true;
      this.board[i+1][j] = true;
    }
  }
  
  public int bestScoreZR (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZRPossible(i, j, temp)) {
          scoreAct = scoreZR(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.ZR);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestZR (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZRPossible(i, j, temp)) {
          scoreAct = scoreZR(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.ZR);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeZR(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreZR (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j] ? 2 : 0;
    score += tempBoard[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += tempBoard[i+2][j] ? 1 : 0;
        score += tempBoard[i+2][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += tempBoard[i-1][j+1] ? 1 : 0;
        score += tempBoard[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += tempBoard[i+2][j] ? 1 : 0;
      score += tempBoard[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i][j+3] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.tempBoard[i][j+3] ? 1 : 0;
    }
    } else {
      score += board[i][j] ? 2 : 0;
    score += board[i+1][j+2] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 2) { //pas coller en bas ni en haut
        score += board[i+2][j] ? 1 : 0;
        score += board[i+2][j+1] ? 1 : 0;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score++;
        score += board[i-1][j+1] ? 1 : 0;
        score += board[i-1][j+2] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score++;
      score += board[i+2][j] ? 1 : 0;
      score += board[i+2][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 3) { //Pas coller a droite ni a gauche
        score += this.board[i][j+3] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score += this.board[i][j+3] ? 1 : 0;
    }
    }

    
    return score;
  }

  public boolean placementZR90Possible (int i, int j, boolean temp) {
    if (i < this.side - 2 && j < this.side - 1) {
      if (temp) {
        return !this.tempBoard[i][j] && !this.tempBoard[i+1][j] && !this.tempBoard[i+1][j+1] && !this.tempBoard[i+2][j+1];
      } else {
        return !this.board[i][j] && !this.board[i+1][j] && !this.board[i+1][j+1] && !this.board[i+2][j+1];
      }
      
    }
    return false;
  }

  public void placeZR90 (int i, int j, boolean temp) {
    if (temp) {
      this.tempBoard[i][j] = true;
      this.tempBoard[i+1][j] = true;
      this.tempBoard[i+1][j+1] = true;
      this.tempBoard[i+2][j+1] = true;
    } else {
      this.board[i][j] = true;
      this.board[i+1][j] = true;
      this.board[i+1][j+1] = true;
      this.board[i+2][j+1] = true;
    }
  }
  
  public int bestScoreZR90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZR90Possible(i, j, temp)) {
          scoreAct = scoreZR90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.ZR90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
          }
        }
      }
    }

    return scoreMax;
  }

  public boolean placeBestZR90 (boolean temp) {
    int scoreMax = 0;
    int scoreAct = 0;
    int iMax = -1;
    int jMax = -1;
    for (int i = 0; i < SIDE; i++) {
      for (int j = 0; j< SIDE; j++) {
        if (placementZR90Possible(i, j, temp)) {
          scoreAct = scoreZR90(i, j, temp);
          scoreAct += checkNbZoneDeleted(i, j, temp, enumPiece.ZR90);
          if (scoreAct > scoreMax) {
            scoreMax = scoreAct;
            iMax = i;
            jMax = j;
          }
        }
      }
    }
    if (iMax != -1) {
      placeZR90(iMax, jMax, false);
    }

    return iMax != -1;
  }

  public int scoreZR90 (int i, int j, boolean temp) {
    int score = 0;
    
    if (temp) {
      score += tempBoard[i][j+1] ? 2 : 0;
    score += tempBoard[i+2][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += tempBoard[i+3][j+1] ? 1 : 0;
        score += tempBoard[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += tempBoard[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += tempBoard[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.tempBoard[i+1][j+2] ? 1 : 0;
        score += this.tempBoard[i+2][j+2] ? 1 : 0;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.tempBoard[i][j-1] ? 1 : 0;
        score += this.tempBoard[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.tempBoard[i+1][j+2] ? 1 : 0;
      score += this.tempBoard[i+2][j+2] ? 1 : 0;
    }
    } else {
      score += board[i][j+1] ? 2 : 0;
    score += board[i+2][j] ? 2 : 0;

    if (i > 0) { //Pas coller en haut
      if (i < SIDE - 3) { //pas coller en bas ni en haut
        score += board[i+3][j+1] ? 1 : 0;
        score += board[i-1][j] ? 1 : 0;
      } else {  //Coller en bas
        score++;
        score += board[i-1][j] ? 1 : 0;
      }
    } else { //Coller en haut
      score++;
      score += board[i+3][j+1] ? 1 : 0;
    }

    if (j > 0) { //Pas coller a gauche
      if (j < SIDE - 2) { //Pas coller a droite ni a gauche
        score += this.board[i+1][j+2] ? 1 : 0;
        score += this.board[i+2][j+2] ? 1 : 0;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      } else {  //coller a droite
        score++;
        score++;
        score += this.board[i][j-1] ? 1 : 0;
        score += this.board[i+1][j-1] ? 1 : 0;
      }
    } else { //Coller a gauche
      score++;
      score++;
      score += this.board[i+1][j+2] ? 1 : 0;
      score += this.board[i+2][j+2] ? 1 : 0;
    }
    }

    
    return score;
  }
  
  public int bestScore (enumPiece p, boolean temp) {
    switch (p) {
    case SINGLE:
      return bestScoreSingle(temp);
    case DIAGONALE2:
      return bestScoreDiago2(temp);
    case DIAGONALE2R:
      return bestScoreDiago2R(temp);
    case DIAGONALE3:
      return bestScoreDiago3(temp);
    case DIAGONALE3R:
      return bestScoreDiago3R(temp);
    case LIGNE2V:
      return bestScoreLigne2V(temp);
    case LIGNE3V:
      return bestScoreLigne3V(temp);
    case LIGNE4V:
      return bestScoreLigne4V(temp);
    case LIGNE5V:
      return bestScoreLigne5V(temp);
    case LIGNE2H:
      return bestScoreLigne2H(temp);
    case LIGNE3H:
      return bestScoreLigne3H(temp);
    case LIGNE4H:
      return bestScoreLigne4H(temp);
    case LIGNE5H:
      return bestScoreLigne5H(temp);
    case LITTLE_L:
      return bestScoreLittleL(temp);
    case LITTLE_L90:
      return bestScoreLittleL90(temp);
    case LITTLE_L180:
      return bestScoreLittleL180(temp);
    case LITTLE_L270:
      return bestScoreLittleL270(temp);
    case MIDDLE_L:
      return bestScoreMiddleL(temp);
    case MIDDLE_L90:
      return bestScoreMiddleL90(temp);
    case MIDDLE_L180:
      return bestScoreMiddleL180(temp);
    case MIDDLE_L270:
      return bestScoreMiddleL270(temp);
    case BIG_L:
      return bestScoreBigL(temp);
    case BIG_L90:
      return bestScoreBigL90(temp);
    case BIG_L180:
      return bestScoreBigL180(temp);
    case BIG_L270:
      return bestScoreBigL270(temp);
    case LITTLE_T:
      return bestScoreLittleT(temp);
    case LITTLE_T90:
      return bestScoreLittleT90(temp);
    case LITTLE_T180:
      return bestScoreLittleT180(temp);
    case LITTLE_T270:
      return bestScoreLittleT270(temp);
    case BIG_T:
      return bestScoreBigT(temp);
    case BIG_T90:
      return bestScoreBigT90(temp);
    case BIG_T180:
      return bestScoreBigT180(temp);
    case BIG_T270:
      return bestScoreBigT270(temp);
    case CROIX:
      return bestScoreCroix(temp);
    case C:
      return bestScoreC(temp);
    case C90:
      return bestScoreC90(temp);
    case C180:
      return bestScoreC180(temp);
    case C270:
      return bestScoreC270(temp);
    case CARRE:
      return bestScoreCarre(temp);
    case Z:
      return bestScoreZ(temp);
    case Z90:
      return bestScoreZ90(temp);
    case ZR:
      return bestScoreZR(temp);
    case ZR90:
      return bestScoreZR90(temp);
    default:
      return -1;
    }
  }



  public void placePieceTemp (int i, int j, enumPiece p) {
    switch (p) {
    case SINGLE:
      placeSingle(i, j, true);
      break;
    case DIAGONALE2:
      placeDiago2(i, j, true);
      break;
    case DIAGONALE2R:
      placeDiago2R(i, j, true);
      break;
    case DIAGONALE3:
      placeDiago3(i, j, true);
      break;
    case DIAGONALE3R:
      placeDiago3R(i, j, true);
      break;
    case LIGNE2V:
      placeLigne2V(i, j, true);
      break;
    case LIGNE3V:
      placeLigne3V(i, j, true);
      break;
    case LIGNE4V:
      placeLigne4V(i, j, true);
      break;
    case LIGNE5V:
      placeLigne5V(i, j, true);
      break;
    case LIGNE2H:
      placeLigne2H(i, j, true);
      break;
    case LIGNE3H:
      placeLigne3H(i, j, true);
      break;
    case LIGNE4H:
      placeLigne4H(i, j, true);
      break;
    case LIGNE5H:
      placeLigne5H(i, j, true);
      break;
    case LITTLE_L:
      placeLittleL(i, j, true);
      break;
    case LITTLE_L90:
      placeLittleL90(i, j, true);
      break;
    case LITTLE_L180:
      placeLittleL180(i, j, true);
      break;
    case LITTLE_L270:
      placeLittleL270(i, j, true);
      break;
    case MIDDLE_L:
      placeMiddleL(i, j, true);
      break;
    case MIDDLE_L90:
      placeMiddleL90(i, j, true);
      break;
    case MIDDLE_L180:
      placeMiddleL180(i, j, true);
      break;
    case MIDDLE_L270:
      placeMiddleL270(i, j, true);
      break;
    case BIG_L:
      placeBigL(i, j, true);
      break;
    case BIG_L90:
      placeBigL90(i, j, true);
      break;
    case BIG_L180:
      placeBigL180(i, j, true);
      break;
    case BIG_L270:
      placeBigL270(i, j, true);
      break;
    case LITTLE_T:
      placeLittleT(i, j, true);
      break;
    case LITTLE_T90:
      placeLittleT90(i, j, true);
      break;
    case LITTLE_T180:
      placeLittleT180(i, j, true);
      break;
    case LITTLE_T270:
      placeLittleT270(i, j, true);
      break;
    case BIG_T:
      placeBigT(i, j, true);
      break;
    case BIG_T90:
      placeBigT90(i, j, true);
      break;
    case BIG_T180:
      placeBigT180(i, j, true);
      break;
    case BIG_T270:
      placeBigT270(i, j, true);
      break;
    case CROIX:
      placeCroix(i, j, true);
      break;
    case C:
      placeC(i, j, true);
      break;
    case C90:
      placeC90(i, j, true);
      break;
    case C180:
      placeC180(i, j, true);
      break;
    case C270:
      placeC270(i, j, true);
      break;
    case CARRE:
      placeCarre(i, j, true);
      break;
    case Z:
      placeZ(i, j, true);
      break;
    case Z90:
      placeZ90(i, j, true);
      break;
    case ZR:
      placeZR(i, j, true);
      break;
    case ZR90:
      placeZR90(i, j, true);
      break;
    default:
      break;
    }
  }

  public boolean placementPossible (int i, int j, enumPiece p, boolean temp) {
    switch (p) {
    case SINGLE:
      return placementSinglePossible(i, j, temp);
    case DIAGONALE2:
      return placementDiago2Possible(i, j, temp);
    case DIAGONALE2R:
      return placementDiago2RPossible(i, j, temp);
    case DIAGONALE3:
      return placementDiago3Possible(i, j, temp);
    case DIAGONALE3R:
      return placementDiago3RPossible(i, j, temp);
    case LIGNE2V:
      return placementLigne2VPossible(i, j, temp);
    case LIGNE3V:
      return placementLigne3VPossible(i, j, temp);
    case LIGNE4V:
      return placementLigne4VPossible(i, j, temp);
    case LIGNE5V:
      return placementLigne5VPossible(i, j, temp);
    case LIGNE2H:
      return placementLigne2HPossible(i, j, temp);
    case LIGNE3H:
      return placementLigne3HPossible(i, j, temp);
    case LIGNE4H:
      return placementLigne4HPossible(i, j, temp);
    case LIGNE5H:
      return placementLigne5HPossible(i, j, temp);
    case LITTLE_L:
      return placementLittleTPossible(i, j, temp);
    case LITTLE_L90:
      return placementLittleT90Possible(i, j, temp);
    case LITTLE_L180:
      return placementLittleT180Possible(i, j, temp);
    case LITTLE_L270:
      return placementLittleT270Possible(i, j, temp);
    case MIDDLE_L:
      return placementMiddleLPossible(i, j, temp);
    case MIDDLE_L90:
      return placementMiddleL90Possible(i, j, temp);
    case MIDDLE_L180:
      return placementMiddleL180Possible(i, j, temp);
    case MIDDLE_L270:
      return placementMiddleL270Possible(i, j, temp);
    case BIG_L:
      return placementBigLPossible(i, j, temp);
    case BIG_L90:
      return placementBigL90Possible(i, j, temp);
    case BIG_L180:
      return placementBigL180Possible(i, j, temp);
    case BIG_L270:
      return placementBigL270Possible(i, j, temp);
    case LITTLE_T:
      return placementLittleTPossible(i, j, temp);
    case LITTLE_T90:
      return placementLittleT90Possible(i, j, temp);
    case LITTLE_T180:
      return placementLittleT180Possible(i, j, temp);
    case LITTLE_T270:
      return placementLittleT270Possible(i, j, temp);
    case BIG_T:
      return placementBigTPossible(i, j, temp);
    case BIG_T90:
      return placementBigT90Possible(i, j, temp);
    case BIG_T180:
      return placementBigT180Possible(i, j, temp);
    case BIG_T270:
      return placementBigT270Possible(i, j, temp);
    case CROIX:
      return placementCroixPossible(i, j, temp);
    case C:
      return placementCPossible(i, j, temp);
    case C90:
      return placementC90Possible(i, j, temp);
    case C180:
      return placementC180Possible(i, j, temp);
    case C270:
      return placementC270Possible(i, j, temp);
    case CARRE:
      return placementCarrePossible(i, j, temp);
    case Z:
      return placementZPossible(i, j, temp);
    case Z90:
      return placementZ90Possible(i, j, temp);
    case ZR:
      return placementZRPossible(i, j, temp);
    case ZR90:
      return placementZR90Possible(i, j, temp);
    default:
      return false;
    }
  }


  public int placePiece (Piece[] p, boolean temp) {
    
    int bestScore = 0;
    int bestPiece = -1;
    
    int nbPiece = 0;
    
    for (int i = 0; i < p.length; i++) {
      if (p[i] != null) {
        nbPiece++;
        if (bestScore(p[i].type, temp) > bestScore) {
          bestScore = bestScore(p[i].type, temp);
          bestPiece = i;
        }
      }
    }
    
    if (bestPiece == -1) {
      return -1;
    }
    
    
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        this.tempBoard[i][j] = this.board[i][j];
      }  
    }
    
    if (nbPiece > 1) {
      placePieceWorker(p[bestPiece].type, false); //TODO Mettre a true et check si il y a une meilleur combinaison
    } else {
      placePieceWorker(p[bestPiece].type, false);
    }
    
    cleanBoard();
    return bestPiece;
  }

  public boolean placePieceWorker (enumPiece p, boolean temp) {
    boolean placed = false;
    switch(p) {
    case SINGLE:
      return placeBestSingle(temp);
    case DIAGONALE2:
      return placeBestDiago2(temp);
    case DIAGONALE2R:
      return placeBestDiago2R(temp);
    case DIAGONALE3:
      return placeBestDiago3(temp);
    case DIAGONALE3R:
      return placeBestDiago3R(temp);
    case LIGNE2V:
      return placeBestLigne2V(temp);
    case LIGNE2H:
      return placeBestLigne2H(temp);
    case LIGNE3V:
      return placeBestLigne3V(temp);
    case LIGNE3H:
      return placeBestLigne3H(temp);
    case LIGNE4V:
      return placeBestLigne4V(temp);
    case LIGNE4H:
      return placeBestLigne4H(temp);
    case LIGNE5V:
      return placeBestLigne5V(temp);
    case LIGNE5H:
      return placeBestLigne5H(temp);
    case LITTLE_L:
      return placeBestLittleL(temp);
    case LITTLE_L90:
      return placeBestLittleL90(temp);
    case LITTLE_L180:
      return placeBestLittleL180(temp);
    case LITTLE_L270:
      return placeBestLittleL270(temp);
    case MIDDLE_L:
      return placeBestMiddleL(temp);
    case MIDDLE_L90:
      return placeBestMiddleL90(temp);
    case MIDDLE_L180:
      return placeBestMiddleL180(temp);
    case MIDDLE_L270:
      return placeBestMiddleL270(temp);
    case BIG_L:
      return placeBestBigL(temp);
    case BIG_L90:
      return placeBestBigL90(temp);
    case BIG_L180:
      return placeBestBigL180(temp);
    case BIG_L270:
      return placeBestBigL270(temp);
    case LITTLE_T:
      return placeBestLittleT(temp);
    case LITTLE_T90:
      return placeBestLittleT90(temp);
    case LITTLE_T180:
      return placeBestLittleT180(temp);
    case LITTLE_T270:
      return placeBestLittleT270(temp);
    case BIG_T:
      return placeBestBigT(temp);
    case BIG_T90:
      return placeBestBigT90(temp);
    case BIG_T180:
      return placeBestBigT180(temp);
    case BIG_T270:
      return placeBestBigT270(temp);
    case CROIX:
      return placeBestCroix(temp);
    case C:
      return placeBestC(temp);
    case C90:
      return placeBestC90(temp);
    case C180:
      return placeBestC180(temp);
    case C270:
      return placeBestC270(temp);
    case CARRE:
      return placeBestCarre(temp);
    case Z:
      return placeBestZ(temp);
    case Z90:
      return placeBestZ90(temp);
    case ZR:
      return placeBestZR(temp);
    case ZR90:
      return placeBestZR90(temp);
    default:
      return placed;
    }
  }

  public boolean placePieceP (enumPiece p, boolean temp) {
    boolean placed = false;
    switch(p) {
    case SINGLE:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementSinglePossible(i, j, temp)) {
            placeSingle(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case DIAGONALE2:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementDiago2Possible(i, j, temp)) {
            placeDiago2(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case DIAGONALE2R:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementDiago2RPossible(i, j, temp)) {
            placeDiago2R(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case DIAGONALE3:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementDiago3Possible(i, j, temp)) {
            placeDiago3(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case DIAGONALE3R:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementDiago3RPossible(i, j, temp)) {
            placeDiago3R(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE2V:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne2VPossible(i, j, temp)) {
            placeLigne2V(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE2H:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne2HPossible(i, j, temp)) {
            placeLigne2H(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE3V:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne3VPossible(i, j, temp)) {
            placeLigne3V(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE3H:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne3HPossible(i, j, temp)) {
            placeLigne3H(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE4V:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne4VPossible(i, j, temp)) {
            placeLigne4V(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE4H:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne4HPossible(i, j, temp)) {
            placeLigne4H(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE5V:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne5VPossible(i, j, temp)) {
            placeLigne5V(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LIGNE5H:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLigne5HPossible(i, j, temp)) {
            placeLigne5H(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_L:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleLPossible(i, j, temp)) {
            placeLittleL(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_L90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleL90Possible(i, j, temp)) {
            placeLittleL90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_L180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleL180Possible(i, j, temp)) {
            placeLittleL180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_L270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleL270Possible(i, j, temp)) {
            placeLittleL270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case MIDDLE_L:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementMiddleLPossible(i, j, temp)) {
            placeMiddleL(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case MIDDLE_L90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementMiddleL90Possible(i, j, temp)) {
            placeMiddleL90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case MIDDLE_L180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementMiddleL180Possible(i, j, temp)) {
            placeMiddleL180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case MIDDLE_L270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementMiddleL270Possible(i, j, temp)) {
            placeMiddleL270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_L:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigLPossible(i, j, temp)) {
            placeBigL(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_L90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigL90Possible(i, j, temp)) {
            placeBigL90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_L180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigL180Possible(i, j, temp)) {
            placeBigL180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_L270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigL270Possible(i, j, temp)) {
            placeBigL270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_T:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleTPossible(i, j, temp)) {
            placeLittleT(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_T90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleT90Possible(i, j, temp)) {
            placeLittleT90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_T180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleT180Possible(i, j, temp)) {
            placeLittleT180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case LITTLE_T270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementLittleT270Possible(i, j, temp)) {
            placeLittleT270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_T:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigTPossible(i, j, temp)) {
            placeBigT(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_T90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigT90Possible(i, j, temp)) {
            placeBigT90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_T180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigT180Possible(i, j, temp)) {
            placeBigT180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case BIG_T270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementBigT270Possible(i, j, temp)) {
            placeBigT270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case CROIX:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementCroixPossible(i, j, temp)) {
            placeCroix(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case C:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementCPossible(i, j, temp)) {
            placeC(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case C90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementC90Possible(i, j, temp)) {
            placeC90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case C180:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementC180Possible(i, j, temp)) {
            placeC180(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case C270:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementC270Possible(i, j, temp)) {
            placeC270(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case CARRE:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementCarrePossible(i, j, temp)) {
            placeCarre(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case Z:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementZPossible(i, j, temp)) {
            placeZ(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case Z90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementZ90Possible(i, j, temp)) {
            placeZ90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case ZR:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementZRPossible(i, j, temp)) {
            placeZR(i, j, false);
            placed = true;
          }
        }
      }
      break;
    case ZR90:
      for (int i = 0; i < this.side && !placed; i++) {
        for (int j = 0; j < this.side && !placed; j++) {
          if (placementZR90Possible(i, j, temp)) {
            placeZR90(i, j, false);
            placed = true;
          }
        }
      }
      break;
    default:
      break;
    }

    if (this.side == SIDE) {
      cleanBoard();
    }

    return placed;
  }

  public void display() {
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        if (this. board[i][j]) {
          fill(53, 108, 225);
        } else if (getCell (i, j) % 2 == 0) {
          fill (255);
        } else {
          fill (226, 233, 239);
        }
        stroke(202, 209, 215);
        strokeWeight(3);
        rect(displayX + cellWidth * j, displayY + cellHeight * i, cellWidth, cellHeight);
      }
    }
    stroke(87, 96, 113);
    noFill();
    rect (150, 100, height - 296, height - 296);


    rect (150, 100, height - 296, (height - 296) / 3);
    rect (150, 100 + (height - 296) / 3, height - 296, (height - 296) / 3);
    rect (150, 100, (height - 296) / 3, height - 296);
    rect (150 + (height - 296) / 3, 100, (height - 296) / 3, height - 296);
  }


  public void display(int index) {
    for (int i = 0; i < this.side; i++) {
      for (int j = 0; j < this.side; j++) {
        if (this.isBoard) {
          if (this. board[i][j]) {
            fill(53, 108, 225);
          } else if (getCell (i, j) % 2 == 0) {
            fill (255);
          } else {
            fill (226, 233, 239);
          }
          stroke(202, 209, 215);
          strokeWeight(3);
          rect(index*200 + 140 + cellWidth * j, 650 + cellHeight * i, cellWidth, cellHeight);
        } else {
          if (this. board[i][j]) {
            fill(53, 108, 225);
            stroke(202, 209, 215);
            strokeWeight(3);
            rect(index*200 + 160 + cellWidth * j, 650 + cellHeight * i, cellWidth, cellHeight);
          }
        }
      }
    }
  }
}
class Button {
  private int x;
  private int y;

  private int width;
  private int height;

  private boolean centered;

  private String text;

  private int fontSize;
  private boolean autoFontSize;
  public int textRed;
  public int textGreen;
  public int textBlue;
  private String font;
  private boolean dirtyFont;

  public int red;
  public int green;
  public int blue;

  private int borderWidth;
  public int borderRed;
  public int borderGreen;
  public int borderBlue;

  private boolean roundedCorners;
  private int cornerRadius;

  public int hoverRedEffect;
  public int hoverGreenEffect;
  public int hoverBlueEffect;
  public int activatedRedEffect;
  public int activatedGreenEffect;
  public int activatedBlueEffect;

  Button (int x, int y, int w, int h, String text) {
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.text = text;
    this.centered = true;

    this.autoFontSize = true;
    this.fontSize = 30;
    this.textRed = 20;
    this.textGreen = 200;
    this.textBlue = 180;
    this.font = PFont.list()[0];
    this.dirtyFont = true;

    this.red = 100;
    this.green = 100;
    this.blue = 100;
    this.borderWidth = 5;
    this.borderRed = 0;
    this.borderGreen = 0;
    this.borderBlue = 0;

    this.roundedCorners = true;
    this.cornerRadius = 200;

    this.hoverRedEffect = 50;
    this.hoverGreenEffect = 50;
    this.hoverBlueEffect = 50;

    this.activatedRedEffect = 50;
    this.activatedGreenEffect = 50;
    this.activatedBlueEffect = 50;
  }

  private void displayRect() {
    if (this.isMouseHovering()) {
      fill(red + hoverRedEffect, green + hoverGreenEffect, blue + hoverBlueEffect);
    } else {
      fill(red, green, blue);
    }

    if (this.borderWidth == 0) {
      noStroke();
    } else {
      strokeWeight(this.borderWidth);
      if (this.isActivated()) {
        stroke(borderRed + activatedRedEffect, borderGreen + activatedGreenEffect, borderBlue + activatedBlueEffect);
      } else {
        stroke(borderRed, borderGreen, borderBlue);
      }
    }
    if (this.centered) {
      if (this.roundedCorners) {
        rect(x-this.width/2, y-this.height/2, this.width, this.height, this.cornerRadius, this.cornerRadius, this.cornerRadius, this.cornerRadius);
      } else {
        rect(x-this.width/2, y-this.height/2, this.width, this.height);
      }
    } else {
      if (this.roundedCorners) {
        rect(x, y, this.width, this.height, this.cornerRadius, this.cornerRadius, this.cornerRadius, this.cornerRadius);
      } else {
        rect(x, y, this.width, this.height);
      }
    }
  }
  
  private void setFontSize() {
    float minWidth = 12/this.text.length() * this.width;

    float minHeight = 12/(textDescent() + textAscent()) * this.height;

    this.fontSize = (int)min(minWidth, minHeight) - 2;
  }

  private void displayText() {
    if (this.autoFontSize && this.dirtyFont) {
      this.setFontSize();
      this.dirtyFont = false;
      textFont(createFont(this.font, this.fontSize));
    } else {
      textFont(createFont(this.font, this.fontSize));
    }

    fill(textRed, textGreen, textBlue);
    textAlign(CENTER, CENTER);
    
    if (this.centered) {
      text(this.text, this.x, this.y);
    } else {
      text(this.text, this.x +this.width / 2, this.y + this.height / 2);
    }
  }

  public void display() {
    this.displayRect();
    this.displayText();
  }

  private void updateCornerRadius() {
    if (this.cornerRadius > height / 2) {
      this.cornerRadius = height / 2;
    }
  }

  public boolean isMouseHovering () {
    if (this.roundedCorners) {
      if (this.centered) {
        if ((mouseX > this.x - this.width / 2 && mouseX < this.x + this.width / 2 && mouseY > this.y + this.cornerRadius - this.height / 2 && mouseY < this.y + this.height / 2 - this.cornerRadius) ||
          (mouseX > this.x + this.cornerRadius - this.width / 2 && mouseX < this.x + this.width / 2 - this.cornerRadius && mouseY > this.y - this.height / 2 && mouseY < this.y + this.height / 2)) {
          return true;
        }
      } else {
        if ((mouseX > this.x && mouseX < this.x + this.width && mouseY > this.y + this.cornerRadius && mouseY < this.y + this.height - this.cornerRadius) ||
          (mouseX > this.x + this.cornerRadius && mouseX < this.x + this.width - this.cornerRadius && mouseY > this.y && mouseY < this.y + this.height)) {
          return true;
        }
      }

      this.updateCornerRadius();

      int distanceTopLeft;
      int distanceTopRight;
      int distanceBottomLeft;
      int distanceBottomRight;

      if (this.centered) {
        distanceTopLeft = distanceTwoPoints(mouseX, mouseY, this.x + this.cornerRadius - this.width / 2, this.y + this.cornerRadius - this.height / 2);
        distanceTopRight = distanceTwoPoints(mouseX, mouseY, this.x + this.width / 2 - this.cornerRadius, this.y + this.cornerRadius - this.height / 2);
        distanceBottomLeft = distanceTwoPoints(mouseX, mouseY, this.x + this.cornerRadius - this.width / 2, this.y + this.height / 2 - this.cornerRadius);
        distanceBottomRight = distanceTwoPoints(mouseX, mouseY, this.x + this.width / 2 - this.cornerRadius, this.y + this.height / 2 - this.cornerRadius);
      } else {
        distanceTopLeft = distanceTwoPoints(mouseX, mouseY, this.x + this.cornerRadius, this.y + this.cornerRadius);
        distanceTopRight = distanceTwoPoints(mouseX, mouseY, this.x + this.width - this.cornerRadius, this.y + this.cornerRadius);
        distanceBottomLeft = distanceTwoPoints(mouseX, mouseY, this.x + this.cornerRadius, this.y + this.height - this.cornerRadius);
        distanceBottomRight = distanceTwoPoints(mouseX, mouseY, this.x + this.width - this.cornerRadius, this.y + this.height - this.cornerRadius);
      }

      if (distanceTopLeft < this.cornerRadius || distanceTopRight < this.cornerRadius || distanceBottomLeft < this.cornerRadius || distanceBottomRight < this.cornerRadius) {
        return true;
      }
      return false;
    } else {
      if (this.centered) {
        return mouseX < this.x + this.width / 2 && mouseX > this.x - this.width / 2 && mouseY < this.y + this.height / 2 && mouseY > this.y - this.height / 2;
      } else {
        return mouseX < this.x + this.width && mouseX > this.x && mouseY < this.y + this.height && mouseY > this.y;
      }
    }
  }

  public boolean isActivated() {
    return mousePressed && this.isMouseHovering();
  }

  public void setColor(int red, int green, int blue) {
    this.red = red;
    this.green = green;
    this.blue = blue;
  }

  public void setColor(int black) {
    this.red = black;
    this.green = black;
    this.blue = black;
  }

  public void setBorderWidth (int bW) {
    this.borderWidth = bW;
  }

  public void setBorderColor (int red, int green, int blue) {
    this.borderRed = red;
    this.borderGreen = green;
    this.borderBlue = blue;
  }

  public void setBorderColor (int black) {
    this.borderRed = black;
    this.borderGreen = black;
    this.borderBlue = black;
  }

  public void setRoundedCorner (int radius) {
    this.roundedCorners = true;
    this.cornerRadius = radius;
  }

  public void setSquareCorner () {
    this.roundedCorners = false;
  }

  public void setX (int x) {
    this.x = x;
  }

  public void setY (int y) {
    this.y = y;
  }

  public void setWidth (int w) {
    this.width = w;
  }

  public void setHeight (int h) {
    this.height = h;
  }

  public void setText(String text) {
    this.text = text;
  }

  public void setFontSize (int size) {
    this.autoFontSize = false;
    this.fontSize = size;
  }

  public void setHoverColorEffect (int red, int green, int blue) {
    this.hoverRedEffect = red;
    this.hoverGreenEffect = green;
    this.hoverBlueEffect = blue;
  }

  public void setHoverColorEffect (int black) {
    this.hoverRedEffect = black;
    this.hoverBlueEffect = black;
    this.hoverGreenEffect = black;
  }

  public void setActivatedColorEffect (int red, int green, int blue) {
    this.activatedRedEffect = red;
    this.activatedGreenEffect = green;
    this.activatedBlueEffect = blue;
  }

  public void setActivatedColorEffect (int black) {
    this.activatedRedEffect = black;
    this.activatedGreenEffect = black;
    this.activatedBlueEffect = black;
  }

  public void setTextColor (int red, int green, int blue) {
    this.textRed = red;
    this.textGreen = green;
    this.textBlue = blue;
  }

  public void setTextColor (int black) {
    this.textRed = black;
    this.textGreen = black;
    this.textBlue = black;
  }

  public void setAutoFontSize (boolean auto) {
    this.autoFontSize = auto;
  }

  public void setFont (String font) {
    this.font = font;
  }
  
  public int getX () {
    return this.x;
  }

  public int getY () {
    return this.y;
  }

  public int getWidth() {
    return this.width;
  }

  public int getHeight() {
    return this.height;
  }

  public String getText() {
    return this.text;
  }

  public String getFont() {
    return this.font;
  }

  public int getFontSize() {
    return this.fontSize;
  }

  public int getBorderWidth() {
    return this.borderWidth;
  }

  public boolean getCornerRounded() {
    return this.roundedCorners;
  }

  public int getCornerRadius() {
    return this.cornerRadius;
  }
}


public int distanceTwoPoints(int x1, int y1, int x2, int y2) {
  return (int)sqrt(pow(max(x1, x2) - min(x1, x2), 2) + pow(max(y1, y2) - min(y1, y2), 2));
}
public enum Menu {
 ACCEUIL,
 JEU;
}
public enum enumPiece {
 SINGLE,
 DIAGONALE2,
 DIAGONALE2R,
 DIAGONALE3,
 DIAGONALE3R,
 LIGNE2V,
 LIGNE3V,
 LIGNE4V,
 LIGNE5V,
 LIGNE2H,
 LIGNE3H,
 LIGNE4H,
 LIGNE5H,
 LITTLE_L,
 LITTLE_L90,
 LITTLE_L180,
 LITTLE_L270,
 MIDDLE_L,
 MIDDLE_L90,
 MIDDLE_L180,
 MIDDLE_L270,
 BIG_L,
 BIG_L90,
 BIG_L180,
 BIG_L270,
 LITTLE_T,
 LITTLE_T90,
 LITTLE_T180,
 LITTLE_T270,
 BIG_T,
 BIG_T90,
 BIG_T180,
 BIG_T270,
 CROIX,
 C,
 C90,
 C180,
 C270,
 CARRE,
 Z,
 Z90,
 ZR,
 ZR90;
}

class Piece {
 
  enumPiece type;
  int index;
  
  Piece(int i) {
    this.type = getRandomPiece();
    this.index = i;  
  }
  
  Piece(enumPiece p, int i) {
    this.type = p;
    this.index = i;
  }
  
  public void display () {
  }
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "main" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
